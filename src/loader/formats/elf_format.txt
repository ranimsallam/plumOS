This file includes more info about the elf format.
The content of this file is generated using dumpelf command in linux. with blank.elf that was generated from blank.asm
sudo apt install pax-utils

*********************************************************************************
blank.asm:
*********************************************************************************
[BITS 32]

section .asm

global _start

; simple program that keeps that calls kernel command 0
_start:

    ; push 20
    ; push 30
    ; mov eax, 0  ; commadn 0 SUM - eax is used for commands to tell the kernel which command to run
    ; int 0x80
    ; add esp, 8  ; restore the stack 8 = 4bytes for each push (20 and 30)
    
    ; push message
    ; mov eax, 1  ; kernel command for printing
    ; int 0x80    ; invoke kernel
    ; add esp, 4  ; restore the stack since we pushed message

_loop:
    ; wait for key press and output the message when the key is pressed
    call getkey
    push eax    ; eax contains the result of the key that was pressed. getkey returns the key that was pressed in eax
    mov eax, 3  ; kernel command putchar - to print
    int 0x80    ; invoke kernel
    add esp, 4

    jmp _loop

getkey:
    mov eax, 2  ; command 2 is kernel command for getkey to get the pressed key
    int 0x80    ; invoce kernel with command=2 (eax)
    
    ; key is returned in eax
    ; loop until key is pressed  
    cmp eax, 0x00
    je getkey
    ret

section .data
message: db 'I can talk with the kernel!', 0

*********************************************************************************
DUMP ELF
*********************************************************************************
$ dumpelf ./blank.elf 
#include <elf.h>

/*
 * ELF dump of './blank.elf'
 *     8668 (0x21DC) bytes
 */

Elf32_Dyn dumpedelf_dyn_0[];
struct {
        Elf32_Ehdr ehdr;
        Elf32_Phdr phdrs[2];
        Elf32_Shdr shdrs[6];
        Elf32_Dyn *dyns;
} dumpedelf_0 = {

.ehdr = {
        .e_ident = { /* (EI_NIDENT bytes) */
                /* [0] EI_MAG:        */ 0x7F,'E','L','F',
                /* [4] EI_CLASS:      */ 1 , /* (ELFCLASS32) */
                /* [5] EI_DATA:       */ 1 , /* (ELFDATA2LSB) */
                /* [6] EI_VERSION:    */ 1 , /* (EV_CURRENT) */
                /* [7] EI_OSABI:      */ 0 , /* (ELFOSABI_NONE) */
                /* [8] EI_ABIVERSION: */ 0 ,
                /* [9-15] EI_PAD:     */ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        },
        .e_type      = 2          , /* (ET_EXEC) */
        .e_machine   = 3          , /* (EM_386) */
        .e_version   = 1          , /* (EV_CURRENT) */
        .e_entry     = 0x400000   , /* (start address at runtime) */
        .e_phoff     = 52         , /* (bytes into file) */
        .e_shoff     = 8428       , /* (bytes into file) */
        .e_flags     = 0x0        ,
        .e_ehsize    = 52         , /* (bytes) */
        .e_phentsize = 32         , /* (bytes) */
        .e_phnum     = 2          , /* (program headers) */
        .e_shentsize = 40         , /* (bytes) */
        .e_shnum     = 6          , /* (section headers) */
        .e_shstrndx  = 5         
},

.phdrs = {
/* Program Header #0 0x34 */
{
        .p_type   = 1          , /* [PT_LOAD] */
        .p_offset = 4096       , /* (bytes into file) */
        .p_vaddr  = 0x400000   , /* (virtual addr at runtime) */
        .p_paddr  = 0x400000   , /* (physical addr at runtime) */
        .p_filesz = 31         , /* (bytes in file) */
        .p_memsz  = 31         , /* (bytes in mem at runtime) */
        .p_flags  = 0x4        , /* PF_R */
        .p_align  = 4096       , /* (min mem alignment in bytes) */
},
/* Program Header #1 0x54 */
{
        .p_type   = 1          , /* [PT_LOAD] */
        .p_offset = 8192       , /* (bytes into file) */
        .p_vaddr  = 0x401000   , /* (virtual addr at runtime) */
        .p_paddr  = 0x401000   , /* (physical addr at runtime) */
        .p_filesz = 28         , /* (bytes in file) */
        .p_memsz  = 28         , /* (bytes in mem at runtime) */
        .p_flags  = 0x6        , /* PF_R | PF_W */
        .p_align  = 4096       , /* (min mem alignment in bytes) */
},
},

.shdrs = {
/* Section Header #0 '' 0x20EC */
{
        .sh_name      = 0          ,
        .sh_type      = 0          , /* [SHT_NULL] */
        .sh_flags     = 0          ,
        .sh_addr      = 0x0        ,
        .sh_offset    = 0          , /* (bytes) */
        .sh_size      = 0          , /* (bytes) */
        .sh_link      = 0          ,
        .sh_info      = 0          ,
        .sh_addralign = 0          ,
        .sh_entsize   = 0         
},
/* Section Header #1 '.asm' 0x2114 */
{
        .sh_name      = 27         ,
        .sh_type      = 1          , /* [SHT_PROGBITS] */
        .sh_flags     = 2          ,
        .sh_addr      = 0x400000   ,
        .sh_offset    = 4096       , /* (bytes) */
        .sh_size      = 31         , /* (bytes) */
        .sh_link      = 0          ,
        .sh_info      = 0          ,
        .sh_addralign = 4096       ,
        .sh_entsize   = 0         
},
/* Section Header #2 '.data' 0x213C */
{
        .sh_name      = 32         ,
        .sh_type      = 1          , /* [SHT_PROGBITS] */
        .sh_flags     = 3          ,
        .sh_addr      = 0x401000   ,
        .sh_offset    = 8192       , /* (bytes) */
        .sh_size      = 28         , /* (bytes) */
        .sh_link      = 0          ,
        .sh_info      = 0          ,
        .sh_addralign = 4096       ,
        .sh_entsize   = 0         
},
/* Section Header #3 '.symtab' 0x2164 */
{
        .sh_name      = 1          ,
        .sh_type      = 2          , /* [SHT_SYMTAB] */
        .sh_flags     = 0          ,
        .sh_addr      = 0x0        ,
        .sh_offset    = 8220       , /* (bytes) */
        .sh_size      = 128        , /* (bytes) */
        .sh_link      = 4          ,
        .sh_info      = 7          ,
        .sh_addralign = 4          ,
        .sh_entsize   = 16        
},
/* Section Header #4 '.strtab' 0x218C */
{
        .sh_name      = 9          ,
        .sh_type      = 3          , /* [SHT_STRTAB] */
        .sh_flags     = 0          ,
        .sh_addr      = 0x0        ,
        .sh_offset    = 8348       , /* (bytes) */
        .sh_size      = 41         , /* (bytes) */
        .sh_link      = 0          ,
        .sh_info      = 0          ,
        .sh_addralign = 1          ,
        .sh_entsize   = 0         
},
/* Section Header #5 '.shstrtab' 0x21B4 */
{
        .sh_name      = 17         ,
        .sh_type      = 3          , /* [SHT_STRTAB] */
        .sh_flags     = 0          ,
        .sh_addr      = 0x0        ,
        .sh_offset    = 8389       , /* (bytes) */
        .sh_size      = 38         , /* (bytes) */
        .sh_link      = 0          ,
        .sh_info      = 0          ,
        .sh_addralign = 1          ,
        .sh_entsize   = 0         
},
},

.dyns = dumpedelf_dyn_0,
};
Elf32_Dyn dumpedelf_dyn_0[] = {
 /* no dynamic tags ! */ };


*********************************************************************************
 READ ELF:
*********************************************************************************

 $ readelf -a ./blank.elf 
ELF Header:
  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF32
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           Intel 80386
  Version:                           0x1
  Entry point address:               0x400000
  Start of program headers:          52 (bytes into file)
  Start of section headers:          8428 (bytes into file)
  Flags:                             0x0
  Size of this header:               52 (bytes)
  Size of program headers:           32 (bytes)
  Number of program headers:         2
  Size of section headers:           40 (bytes)
  Number of section headers:         6
  Section header string table index: 5

Section Headers:
  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
  [ 1] .asm              PROGBITS        00400000 001000 00001f 00   A  0   0 4096
  [ 2] .data             PROGBITS        00401000 002000 00001c 00  WA  0   0 4096
  [ 3] .symtab           SYMTAB          00000000 00201c 000080 10      4   7  4
  [ 4] .strtab           STRTAB          00000000 00209c 000029 00      0   0  1
  [ 5] .shstrtab         STRTAB          00000000 0020c5 000026 00      0   0  1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  D (mbind), p (processor specific)

There are no section groups in this file.

Program Headers:
  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
  LOAD           0x001000 0x00400000 0x00400000 0x0001f 0x0001f R   0x1000
  LOAD           0x002000 0x00401000 0x00401000 0x0001c 0x0001c RW  0x1000

 Section to Segment mapping:
  Segment Sections...
   00     .asm 
   01     .data 

There is no dynamic section in this file.

There are no relocations in this file.
No processor specific unwind information to decode

Symbol table '.symtab' contains 8 entries:
   Num:    Value  Size Type    Bind   Vis      Ndx Name
     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND 
     1: 00400000     0 SECTION LOCAL  DEFAULT    1 .asm
     2: 00401000     0 SECTION LOCAL  DEFAULT    2 .data
     3: 00000000     0 FILE    LOCAL  DEFAULT  ABS ./blank.asm
     4: 00400000     0 NOTYPE  LOCAL  DEFAULT    1 _loop
     5: 00400012     0 NOTYPE  LOCAL  DEFAULT    1 getkey
     6: 00401000     0 NOTYPE  LOCAL  DEFAULT    2 message
     7: 00400000     0 NOTYPE  GLOBAL DEFAULT    1 _start

No version information found in this file.




*********************************************************************************
Linker Script: linker.ld
*********************************************************************************

ENTRY(_start) /* entry point is _start*/
OUTPUT_FORMAT(elf32-i386) /* binary for binary format*/
SECTIONS
{
    /*The linker creates addresses base on this origin*/
    . = 0x400000;      /* map user programs at virtual address 0x400000 - config.h PLUMOS_PROGRAM_VIRTUAL_ADDRESS 0x400000*/

    .text : ALIGN(4096)      /* Define the text section*/
    {
        *(.text)
    }

     /*its important to have .asm at the end here, since what we have inside .asm is not aligned and by putting it at the end it will not interfere with other sections and mess their alignment*/
    .asm : ALIGN(4096)      /* Define asm section*/
    {
        *(.asm)
    }

    .rodata : ALIGN(4096)    /* Define read-only data*/
    {
        *(.rodata)
    }

    .data : ALIGN(4096)     /* Define data section*/
    {
        *(.data)
    }

    .bss : ALIGN(4096)      /* Define bss section*/
    {
        *(COMMON)
        *(.bss)
    }
}